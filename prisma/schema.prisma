generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==================== MULTI-TENANT CORE ====================

model Organization {
  id             String  @id @default(cuid())
  name           String
  legalName      String?
  domain         String? @unique
  type           String  @default("SINGLE_BUSINESS") // OrganizationType
  subscriptionId String?
  isActive       Boolean @default(true)
  settings       String? // JSON stored as string
  encryptionKey  String // Organization-specific encryption
  businessNumber String?
  taxNumber      String?

  // Master Organization (for lifestreamdynamics.com)
  isMasterOrg      Boolean   @default(false)
  domainVerified   Boolean   @default(false)
  domainVerifiedAt DateTime?

  // Contact Information
  email   String
  phone   String
  website String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  users                    User[]
  persons                  Person[]
  businesses               Business[]
  customers                Customer[]
  vendors                  Vendor[]
  employees                Employee[]
  contractors              Contractor[]
  locations                Location[]
  products                 Product[]
  services                 Service[]
  accounts                 Account[]
  quotes                   Quote[]
  invoices                 Invoice[]
  payments                 Payment[]
  expenses                 Expense[]
  projects                 Project[]
  appointments             Appointment[]
  addresses                Address[]
  documents                Document[]
  auditLogs                AuditLog[]
  apiKeys                  ApiKey[]
  taxRecords               TaxRecord[]
  bankAccounts             BankAccount[]
  bankTransactions         BankTransaction[]
  securityEvents           SecurityEvent[]
  recurringInvoices        RecurringInvoice[]
  customerPaymentMethods   CustomerPaymentMethod[]
  customerPaymentTokens    CustomerPaymentToken[]
  contractorPayments       ContractorPayment[]
  notifications            Notification[]
  webhooks                 Webhook[]
  invoiceTemplates         InvoiceTemplate[]
  invoiceStyles            InvoiceStyle[]
  branding                 OrganizationBranding?
  generatedPDFs            GeneratedPDF[]
  purchaseOrders           PurchaseOrder[]
  bills                    Bill[]
  vendorPayments           VendorPayment[]
  inventoryItems           InventoryItem[]
  inventoryTransactions    InventoryTransaction[]
  employeeTimeEntries      EmployeeTimeEntry[]
  quoteAcceptanceTokens    QuoteAcceptanceToken[]
  appointmentBookingTokens AppointmentBookingToken[]
  intakeFormTemplates      IntakeFormTemplate[]
  userGoogleTokens         UserGoogleToken[]
  smsMessages              SmsMessage[]
  searchIndexes            SearchIndex[]
  encryptionAuditLogs      EncryptionAuditLog[]
  intakeSettings           IntakeSettings?
  systemIntegrations       SystemIntegration[]
  subscriptions             OrganizationSubscription[]

  @@index([domain])
  @@index([isActive])
  @@map("organizations")
}

// ==================== AUTHENTICATION & AUTHORIZATION ====================

model User {
  id               String  @id @default(cuid())
  organizationId   String
  email            String  @unique // Globally unique email across all organizations
  passwordHash     String
  firstName        String
  lastName         String
  role             String // UserRole enum
  isActive         Boolean @default(true)
  lastLoginAt      DateTime?
  failedLoginCount Int       @default(0)
  lockoutUntil     DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization            Organization              @relation(fields: [organizationId], references: [id])
  documents               Document[]
  auditLogs               AuditLog[]
  apiKeys                 ApiKey[]
  securityEvents          SecurityEvent[]
  notifications           Notification[]
  googleTokens            UserGoogleToken[]
  sessions                Session[]
  createdSystemIntegrations SystemIntegration[] @relation("CreatedSystemIntegrations")
  createdSystemBackups SystemBackup[] @relation("CreatedSystemBackups")
  deletedSystemBackups SystemBackup[] @relation("DeletedSystemBackups")

  // Keep compound unique for backward compatibility and additional validation
  @@unique([organizationId, email])
  @@index([organizationId])
  @@index([role])
  @@map("users")
}

model Session {
  id              String   @id @default(cuid())
  userId          String
  token           String   @unique
  refreshToken    String?  @unique
  expiresAt       DateTime
  lastActivityAt  DateTime @default(now())
  ipAddress       String?
  userAgent       String?
  deviceInfo      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([token])
  @@map("sessions")
}

model ApiKey {
  id             String  @id @default(cuid())
  organizationId String
  userId         String
  name           String
  keyHash        String  @unique
  permissions    String // JSON array
  isActive       Boolean @default(true)
  expiresAt      DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@map("api_keys")
}

// ==================== PERSON & BUSINESS ENTITIES ====================

model Person {
  id             String @id @default(cuid())
  organizationId String

  // Personal Information
  firstName String
  lastName  String
  email     String
  phone     String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  customers    Customer[]
  employees    Employee[]
  contractors  Contractor[]

  @@index([organizationId])
  @@index([email])
  @@map("persons")
}

model Business {
  id             String @id @default(cuid())
  organizationId String

  // Business Information
  legalName      String
  tradingName    String?
  businessNumber String?
  taxNumber      String?
  type           String // BusinessType enum
  industry       String?
  website        String?

  // Contact
  email String
  phone String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  customers    Customer[]
  vendors      Vendor[]

  @@index([organizationId])
  @@index([businessNumber])
  @@map("businesses")
}

model Address {
  id             String @id @default(cuid())
  organizationId String

  // Address Information
  type        String // BILLING, SHIPPING, PHYSICAL, MAILING
  addressLine1 String
  addressLine2 String?
  city         String
  province     String
  postalCode   String
  country      String @default("CA")

  // Polymorphic Relationship
  entityType String // Customer, Vendor, Location, etc.
  entityId   String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([entityType, entityId])
  @@map("addresses")
}

// ==================== CUSTOMER MANAGEMENT ====================

model Customer {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  customerNumber String @unique
  type           String // CustomerType (PERSON or BUSINESS)
  status         String @default("PROSPECT") // CustomerStatus
  tier           String @default("PERSONAL") // CustomerTier

  // Person or Business Reference
  personId   String?
  businessId String?

  // Contact (denormalized for performance)
  email String
  phone String
  name  String // Full name or business name

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization      Organization        @relation(fields: [organizationId], references: [id])
  person            Person?             @relation(fields: [personId], references: [id])
  business          Business?           @relation(fields: [businessId], references: [id])
  quotes            Quote[]
  invoices          Invoice[]
  payments          Payment[]
  projects          Project[]
  appointments      Appointment[]
  paymentMethods    CustomerPaymentMethod[]
  paymentTokens     CustomerPaymentToken[]

  @@index([organizationId])
  @@index([customerNumber])
  @@index([email])
  @@index([status])
  @@index([tier])
  @@map("customers")
}

model Vendor {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  vendorNumber String @unique
  type         String // PERSON or BUSINESS

  // Person or Business Reference
  businessId String?

  // Contact
  email String
  phone String
  name  String

  // Payment Terms
  paymentTerms    String?
  defaultCurrency String  @default("CAD")

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization    Organization      @relation(fields: [organizationId], references: [id])
  business        Business?         @relation(fields: [businessId], references: [id])
  expenses        Expense[]
  purchaseOrders  PurchaseOrder[]
  bills           Bill[]
  vendorPayments  VendorPayment[]

  @@index([organizationId])
  @@index([vendorNumber])
  @@map("vendors")
}

model Employee {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  employeeNumber String @unique
  personId       String

  // Employment Details
  jobTitle   String
  department String?
  hireDate   DateTime
  endDate    DateTime?
  isActive   Boolean  @default(true)

  // Compensation
  salary       Decimal?
  hourlyRate   Decimal?
  payFrequency String? // WEEKLY, BIWEEKLY, MONTHLY

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization    Organization          @relation(fields: [organizationId], references: [id])
  person          Person                @relation(fields: [personId], references: [id])
  timeEntries     EmployeeTimeEntry[]

  @@index([organizationId])
  @@index([employeeNumber])
  @@map("employees")
}

model Contractor {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  contractorNumber String @unique
  personId         String

  // Contract Details
  specialty       String?
  hourlyRate      Decimal
  isActive        Boolean @default(true)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization       Organization         @relation(fields: [organizationId], references: [id])
  person             Person               @relation(fields: [personId], references: [id])
  contractorPayments ContractorPayment[]

  @@index([organizationId])
  @@index([contractorNumber])
  @@map("contractors")
}

model Location {
  id             String @id @default(cuid())
  organizationId String

  // Location Details
  name        String
  code        String
  description String?
  isActive    Boolean @default(true)

  // Address
  addressLine1 String
  addressLine2 String?
  city         String
  province     String
  postalCode   String
  country      String @default("CA")

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  appointments Appointment[]

  @@index([organizationId])
  @@index([code])
  @@map("locations")
}

// ==================== PRODUCTS & SERVICES ====================

model Product {
  id             String @id @default(cuid())
  organizationId String

  // Product Information
  sku         String  @unique
  name        String
  description String?
  categoryId  String?

  // Pricing
  unitPrice Decimal
  cost      Decimal?
  currency  String  @default("CAD")

  // Inventory
  trackInventory Boolean @default(false)
  stockQuantity  Int     @default(0)
  reorderLevel   Int?

  // Tax
  isTaxable Boolean @default(true)
  taxCode   String?

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization          Organization            @relation(fields: [organizationId], references: [id])
  category              ProductCategory?        @relation(fields: [categoryId], references: [id])
  quoteLineItems        QuoteLineItem[]
  invoiceLineItems      InvoiceLineItem[]
  inventoryItems        InventoryItem[]
  inventoryTransactions InventoryTransaction[]

  @@index([organizationId])
  @@index([sku])
  @@index([categoryId])
  @@map("products")
}

model Service {
  id             String @id @default(cuid())
  organizationId String

  // Service Information
  code        String  @unique
  name        String
  description String?
  categoryId  String?

  // Pricing
  defaultRate Decimal
  unit        String  @default("HOUR") // HOUR, DAY, FIXED, etc.
  currency    String  @default("CAD")

  // Tax
  isTaxable Boolean @default(true)
  taxCode   String?

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization     Organization      @relation(fields: [organizationId], references: [id])
  category         ServiceCategory?  @relation(fields: [categoryId], references: [id])
  quoteLineItems   QuoteLineItem[]
  invoiceLineItems InvoiceLineItem[]

  @@index([organizationId])
  @@index([code])
  @@index([categoryId])
  @@map("services")
}

// ==================== QUOTING SYSTEM ====================

model Quote {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  quoteNumber String @unique
  customerId  String

  // Quote Details
  subject     String?
  description String?
  status      String  @default("DRAFT") // QuoteStatus
  validUntil  DateTime

  // Financial
  subtotal       Decimal
  taxTotal       Decimal
  total          Decimal
  currency       String  @default("CAD")
  depositAmount  Decimal?
  depositPercent Decimal?

  // Acceptance
  acceptedAt     DateTime?
  acceptedBy     String? // Email or name
  acceptanceNote String?

  // Conversion
  convertedToInvoice Boolean   @default(false)
  invoiceId          String?
  convertedAt        DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization      Organization            @relation(fields: [organizationId], references: [id])
  customer          Customer                @relation(fields: [customerId], references: [id])
  lineItems         QuoteLineItem[]
  acceptanceTokens  QuoteAcceptanceToken[]

  @@index([organizationId])
  @@index([quoteNumber])
  @@index([customerId])
  @@index([status])
  @@map("quotes")
}

model QuoteLineItem {
  id             String @id @default(cuid())
  quoteId        String

  // Line Item Type
  type       String // PRODUCT, SERVICE, CUSTOM
  productId  String?
  serviceId  String?

  // Item Details
  description String
  quantity    Decimal
  unitPrice   Decimal
  discount    Decimal @default(0)
  taxAmount   Decimal @default(0)
  total       Decimal

  // Tax
  isTaxable Boolean @default(true)
  taxCode   String?
  taxRate   Decimal?

  // Sort Order
  sortOrder Int @default(0)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  quote   Quote     @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product Product?  @relation(fields: [productId], references: [id])
  service Service?  @relation(fields: [serviceId], references: [id])

  @@index([quoteId])
  @@map("quote_line_items")
}

model QuoteAcceptanceToken {
  id             String @id @default(cuid())
  organizationId String
  quoteId        String

  // Token Details
  token      String   @unique
  expiresAt  DateTime
  isUsed     Boolean  @default(false)
  usedAt     DateTime?

  // Security
  ipAddress String?
  userAgent String?

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  quote        Quote        @relation(fields: [quoteId], references: [id])

  @@index([organizationId])
  @@index([quoteId])
  @@index([token])
  @@index([expiresAt])
  @@map("quote_acceptance_tokens")
}

// ==================== APPOINTMENT SCHEDULING ====================

model Appointment {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  appointmentNumber String @unique
  customerId        String

  // Appointment Details
  title       String
  description String?
  status      String  @default("SCHEDULED") // SCHEDULED, CONFIRMED, IN_PROGRESS, COMPLETED, CANCELLED, NO_SHOW
  locationId  String?

  // Schedule
  scheduledStart DateTime
  scheduledEnd   DateTime
  actualStart    DateTime?
  actualEnd      DateTime?

  // Notifications
  reminderSent   Boolean   @default(false)
  reminderSentAt DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization  Organization              @relation(fields: [organizationId], references: [id])
  customer      Customer                  @relation(fields: [customerId], references: [id])
  location      Location?                 @relation(fields: [locationId], references: [id])
  bookingTokens AppointmentBookingToken[]

  @@index([organizationId])
  @@index([appointmentNumber])
  @@index([customerId])
  @@index([status])
  @@index([scheduledStart])
  @@map("appointments")
}

model AppointmentBookingToken {
  id             String @id @default(cuid())
  organizationId String
  appointmentId  String

  // Token Details
  token      String   @unique
  expiresAt  DateTime
  isUsed     Boolean  @default(false)
  usedAt     DateTime?

  // Security
  ipAddress String?
  userAgent String?

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  appointment  Appointment  @relation(fields: [appointmentId], references: [id])

  @@index([organizationId])
  @@index([appointmentId])
  @@index([token])
  @@index([expiresAt])
  @@map("appointment_booking_tokens")
}

// ==================== INVOICING SYSTEM ====================

model Invoice {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  invoiceNumber String @unique
  customerId    String
  quoteId       String? // If converted from quote

  // Invoice Details
  subject     String?
  description String?
  status      String  @default("DRAFT") // InvoiceStatus
  issueDate   DateTime
  dueDate     DateTime

  // Financial
  subtotal      Decimal
  taxTotal      Decimal
  total         Decimal
  amountPaid    Decimal @default(0)
  amountDue     Decimal
  currency      String  @default("CAD")

  // Payment Terms
  paymentTerms String?
  notes        String?

  // Deposits
  depositAmount Decimal?
  depositPaid   Boolean @default(false)
  depositPaidAt DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  sentAt    DateTime?
  paidAt    DateTime?

  // Relationships
  organization     Organization        @relation(fields: [organizationId], references: [id])
  customer         Customer            @relation(fields: [customerId], references: [id])
  lineItems        InvoiceLineItem[]
  payments         Payment[]
  generatedPDFs    GeneratedPDF[]

  @@index([organizationId])
  @@index([invoiceNumber])
  @@index([customerId])
  @@index([status])
  @@index([dueDate])
  @@map("invoices")
}

model InvoiceLineItem {
  id             String @id @default(cuid())
  invoiceId      String

  // Line Item Type
  type       String // PRODUCT, SERVICE, CUSTOM
  productId  String?
  serviceId  String?

  // Item Details
  description String
  quantity    Decimal
  unitPrice   Decimal
  discount    Decimal @default(0)
  taxAmount   Decimal @default(0)
  total       Decimal

  // Tax
  isTaxable Boolean @default(true)
  taxCode   String?
  taxRate   Decimal?

  // Sort Order
  sortOrder Int @default(0)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  invoice Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])

  @@index([invoiceId])
  @@map("invoice_line_items")
}

model RecurringInvoice {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  customerId String

  // Recurrence Details
  frequency      String   @default("MONTHLY") // WEEKLY, MONTHLY, QUARTERLY, YEARLY
  startDate      DateTime
  endDate        DateTime?
  nextIssueDate  DateTime
  isActive       Boolean  @default(true)

  // Invoice Template
  subject        String?
  description    String?
  paymentTerms   String?
  notes          String?

  // Financial
  subtotal       Decimal
  taxTotal       Decimal
  total          Decimal
  currency       String  @default("CAD")

  // Last Generation
  lastGeneratedAt     DateTime?
  lastGeneratedInvoiceId String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([nextIssueDate])
  @@index([isActive])
  @@map("recurring_invoices")
}

// ==================== PAYMENT PROCESSING ====================

model Payment {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  paymentNumber String @unique
  customerId    String
  invoiceId     String?

  // Payment Details
  amount       Decimal
  currency     String  @default("CAD")
  method       String // PaymentMethod
  status       String  @default("PENDING") // PaymentStatus
  reference    String?

  // Stripe Integration
  stripePaymentIntentId String?
  stripeChargeId        String?
  stripeRefundId        String?

  // e-Transfer Integration
  eTransferEmail       String?
  eTransferReference   String?
  eTransferSecurityQ   String?
  eTransferSecurityA   String?

  // Processing
  processedAt DateTime?
  failedAt    DateTime?
  failureReason String?

  // Refunds
  isRefunded      Boolean   @default(false)
  refundedAt      DateTime?
  refundAmount    Decimal?
  refundReason    String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  customer     Customer     @relation(fields: [customerId], references: [id])
  invoice      Invoice?     @relation(fields: [invoiceId], references: [id])

  @@index([organizationId])
  @@index([paymentNumber])
  @@index([customerId])
  @@index([invoiceId])
  @@index([status])
  @@index([stripePaymentIntentId])
  @@map("payments")
}

model CustomerPaymentMethod {
  id             String @id @default(cuid())
  organizationId String
  customerId     String

  // Payment Method Details
  type              String // STRIPE_CARD, BANK_ACCOUNT, etc.
  isDefault         Boolean @default(false)

  // Stripe
  stripePaymentMethodId String?
  cardBrand             String?
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?

  // Bank Account
  bankName          String?
  accountLast4      String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  customer     Customer     @relation(fields: [customerId], references: [id])

  @@index([organizationId])
  @@index([customerId])
  @@map("customer_payment_methods")
}

model CustomerPaymentToken {
  id             String @id @default(cuid())
  organizationId String
  customerId     String
  invoiceId      String

  // Token Details
  token      String   @unique
  expiresAt  DateTime
  isUsed     Boolean  @default(false)
  usedAt     DateTime?

  // Security
  ipAddress String?
  userAgent String?

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  customer     Customer     @relation(fields: [customerId], references: [id])

  @@index([organizationId])
  @@index([customerId])
  @@index([invoiceId])
  @@index([token])
  @@index([expiresAt])
  @@map("customer_payment_tokens")
}

// ==================== EXPENSE MANAGEMENT ====================

model Expense {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  expenseNumber String @unique
  vendorId      String?

  // Expense Details
  description String
  category    String // ExpenseCategory
  amount      Decimal
  currency    String  @default("CAD")
  date        DateTime

  // Tax
  taxAmount Decimal @default(0)
  taxCode   String?

  // Payment
  isPaid     Boolean   @default(false)
  paidAt     DateTime?
  paymentMethod String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  vendor       Vendor?      @relation(fields: [vendorId], references: [id])

  @@index([organizationId])
  @@index([expenseNumber])
  @@index([vendorId])
  @@index([category])
  @@index([date])
  @@map("expenses")
}

model ContractorPayment {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  paymentNumber String @unique
  contractorId  String

  // Payment Details
  description String
  amount      Decimal
  currency    String  @default("CAD")
  hoursWorked Decimal?
  hourlyRate  Decimal?

  // Payment
  isPaid     Boolean   @default(false)
  paidAt     DateTime?
  method     String?
  reference  String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  contractor   Contractor   @relation(fields: [contractorId], references: [id])

  @@index([organizationId])
  @@index([paymentNumber])
  @@index([contractorId])
  @@map("contractor_payments")
}

// ==================== PROJECT MANAGEMENT ====================

model Project {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  projectNumber String @unique
  customerId    String

  // Project Details
  name        String
  description String?
  status      String  @default("QUOTED") // ProjectStatus

  // Schedule
  startDate    DateTime?
  endDate      DateTime?
  estimatedHours Decimal?

  // Financial
  budget       Decimal?
  actualCost   Decimal?
  currency     String  @default("CAD")

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  customer     Customer     @relation(fields: [customerId], references: [id])

  @@index([organizationId])
  @@index([projectNumber])
  @@index([customerId])
  @@index([status])
  @@map("projects")
}

// ==================== ACCOUNTING SYSTEM ====================

model Account {
  id             String @id @default(cuid())
  organizationId String

  // Account Details
  accountCode String @unique
  name        String
  type        String // AccountType
  subtype     String?
  description String?

  // Financial
  normalBalance String // DEBIT or CREDIT
  balance       Decimal @default(0)
  currency      String  @default("CAD")

  // Status
  isActive Boolean @default(true)
  isSystem Boolean @default(false)

  // Parent Account (for hierarchical chart of accounts)
  parentId String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization    Organization      @relation(fields: [organizationId], references: [id])
  parent          Account?          @relation("AccountHierarchy", fields: [parentId], references: [id])
  children        Account[]         @relation("AccountHierarchy")
  journalEntries  JournalEntry[]

  @@index([organizationId])
  @@index([accountCode])
  @@index([type])
  @@map("accounts")
}

model JournalEntry {
  id             String @id @default(cuid())
  organizationId String

  // Entry Details
  entryNumber String   @unique
  accountId   String
  date        DateTime
  description String

  // Transaction
  type   String // DEBIT or CREDIT
  amount Decimal

  // References
  entityType String? // Invoice, Payment, Expense, etc.
  entityId   String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  account Account @relation(fields: [accountId], references: [id])

  @@index([organizationId])
  @@index([entryNumber])
  @@index([accountId])
  @@index([date])
  @@index([entityType, entityId])
  @@map("journal_entries")
}

model TaxRecord {
  id             String @id @default(cuid())
  organizationId String

  // Tax Period
  year    Int
  quarter Int?
  month   Int?

  // Tax Amounts
  gstCollected Decimal @default(0)
  gstPaid      Decimal @default(0)
  gstOwing     Decimal @default(0)

  hstCollected Decimal @default(0)
  hstPaid      Decimal @default(0)
  hstOwing     Decimal @default(0)

  pstCollected Decimal @default(0)
  pstPaid      Decimal @default(0)
  pstOwing     Decimal @default(0)

  qstCollected Decimal @default(0)
  qstPaid      Decimal @default(0)
  qstOwing     Decimal @default(0)

  // Filing
  isFiled   Boolean   @default(false)
  filedAt   DateTime?
  dueDate   DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, year, quarter, month])
  @@index([organizationId])
  @@index([year])
  @@map("tax_records")
}

// ==================== BANKING ====================

model BankAccount {
  id             String @id @default(cuid())
  organizationId String

  // Account Details
  accountName   String
  accountNumber String
  institution   String
  branchNumber  String?
  transitNumber String?
  currency      String  @default("CAD")

  // Balance
  currentBalance Decimal @default(0)

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization      @relation(fields: [organizationId], references: [id])
  transactions BankTransaction[]

  @@index([organizationId])
  @@index([accountNumber])
  @@map("bank_accounts")
}

model BankTransaction {
  id             String @id @default(cuid())
  organizationId String
  bankAccountId  String

  // Transaction Details
  date          DateTime
  description   String
  amount        Decimal
  type          String // DEBIT or CREDIT
  balance       Decimal?

  // Reconciliation
  isReconciled  Boolean   @default(false)
  reconciledAt  DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  bankAccount  BankAccount  @relation(fields: [bankAccountId], references: [id])

  @@index([organizationId])
  @@index([bankAccountId])
  @@index([date])
  @@map("bank_transactions")
}

// ==================== AUDIT & SECURITY ====================

model AuditLog {
  id             String @id @default(cuid())
  organizationId String
  userId         String?

  // Action Details
  action      String // AuditAction enum
  entityType  String // Customer, Invoice, Payment, etc.
  entityId    String?
  description String?

  // Changes
  changes String? // JSON of before/after values

  // Request Context
  ipAddress String?
  userAgent String?

  // Timestamp
  timestamp DateTime @default(now())

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([action])
  @@index([entityType, entityId])
  @@index([timestamp])
  @@map("audit_logs")
}

model SecurityEvent {
  id             String @id @default(cuid())
  organizationId String
  userId         String?

  // Event Details
  eventType   String // LOGIN_SUCCESS, LOGIN_FAILED, PASSWORD_RESET, etc.
  severity    String // LOW, MEDIUM, HIGH, CRITICAL
  description String

  // Context
  ipAddress String?
  userAgent String?
  metadata  String? // JSON

  // Timestamp
  timestamp DateTime @default(now())

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([eventType])
  @@index([severity])
  @@index([timestamp])
  @@map("security_events")
}

// ==================== NOTIFICATIONS ====================

model Notification {
  id             String @id @default(cuid())
  organizationId String
  userId         String

  // Notification Details
  type    String // EMAIL, SMS, IN_APP
  title   String
  message String
  link    String?

  // Status
  isRead Boolean   @default(false)
  readAt DateTime?

  // Timestamp
  createdAt DateTime @default(now())

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// ==================== WEBHOOKS ====================

model Webhook {
  id             String @id @default(cuid())
  organizationId String

  // Webhook Configuration
  url          String
  events       String // JSON array of event types
  secret       String
  isActive     Boolean @default(true)

  // Retry Settings
  maxRetries   Int     @default(3)
  retryDelay   Int     @default(60) // seconds

  // Last Delivery
  lastDeliveredAt DateTime?
  lastStatus      String?
  lastError       String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([isActive])
  @@map("webhooks")
}

// ==================== PDF GENERATION & TEMPLATES ====================

model InvoiceTemplate {
  id             String @id @default(cuid())
  organizationId String

  // Template Details
  name        String
  description String?
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)

  // Template Content (Handlebars)
  htmlTemplate String
  cssStyles    String?

  // Customization
  showLogo          Boolean @default(true)
  showCompanyInfo   Boolean @default(true)
  showPaymentTerms  Boolean @default(true)
  showNotes         Boolean @default(true)
  footerText        String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([isDefault])
  @@map("invoice_templates")
}

model InvoiceStyle {
  id             String @id @default(cuid())
  organizationId String

  // Style Details
  name        String
  description String?
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)

  // Colors
  primaryColor   String @default("#000000")
  secondaryColor String @default("#666666")
  accentColor    String @default("#0066cc")

  // Typography
  fontFamily     String @default("Arial, sans-serif")
  fontSize       Int    @default(12)
  headingFont    String @default("Arial, sans-serif")

  // Layout
  pageSize       String @default("A4")
  orientation    String @default("portrait")
  marginTop      Int    @default(20)
  marginBottom   Int    @default(20)
  marginLeft     Int    @default(20)
  marginRight    Int    @default(20)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([isDefault])
  @@map("invoice_styles")
}

model OrganizationBranding {
  id             String @id @default(cuid())
  organizationId String @unique

  // Logo
  logoUrl       String?
  logoWidth     Int?
  logoHeight    Int?

  // Colors
  primaryColor   String @default("#000000")
  secondaryColor String @default("#666666")
  accentColor    String @default("#0066cc")

  // Contact Information for Documents
  displayName    String?
  displayEmail   String?
  displayPhone   String?
  displayAddress String?
  displayWebsite String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@map("organization_branding")
}

model GeneratedPDF {
  id             String @id @default(cuid())
  organizationId String

  // PDF Details
  entityType String // INVOICE, QUOTE, STATEMENT, etc.
  entityId   String
  filename   String
  filePath   String
  fileSize   Int

  // Generation Details
  templateId String?
  styleId    String?
  version    Int     @default(1)

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  invoice      Invoice?     @relation(fields: [entityId], references: [id])

  @@index([organizationId])
  @@index([entityType, entityId])
  @@map("generated_pdfs")
}

// ==================== PURCHASE ORDERS & BILLS ====================

model PurchaseOrder {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  poNumber String @unique
  vendorId String

  // PO Details
  description String?
  status      String @default("DRAFT") // DRAFT, SENT, APPROVED, RECEIVED, CANCELLED
  orderDate   DateTime
  expectedDate DateTime?

  // Financial
  subtotal Decimal
  taxTotal Decimal
  total    Decimal
  currency String  @default("CAD")

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  vendor       Vendor       @relation(fields: [vendorId], references: [id])

  @@index([organizationId])
  @@index([poNumber])
  @@index([vendorId])
  @@map("purchase_orders")
}

model Bill {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  billNumber String @unique
  vendorId   String

  // Bill Details
  description String?
  status      String @default("UNPAID") // UNPAID, PARTIALLY_PAID, PAID, OVERDUE, CANCELLED
  billDate    DateTime
  dueDate     DateTime

  // Financial
  subtotal   Decimal
  taxTotal   Decimal
  total      Decimal
  amountPaid Decimal @default(0)
  amountDue  Decimal
  currency   String  @default("CAD")

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization   Organization     @relation(fields: [organizationId], references: [id])
  vendor         Vendor           @relation(fields: [vendorId], references: [id])
  vendorPayments VendorPayment[]

  @@index([organizationId])
  @@index([billNumber])
  @@index([vendorId])
  @@index([status])
  @@index([dueDate])
  @@map("bills")
}

model VendorPayment {
  id             String @id @default(cuid())
  organizationId String

  // Reference
  paymentNumber String @unique
  vendorId      String
  billId        String?

  // Payment Details
  amount    Decimal
  currency  String @default("CAD")
  method    String
  reference String?

  // Processing
  processedAt DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  vendor       Vendor       @relation(fields: [vendorId], references: [id])
  bill         Bill?        @relation(fields: [billId], references: [id])

  @@index([organizationId])
  @@index([paymentNumber])
  @@index([vendorId])
  @@index([billId])
  @@map("vendor_payments")
}

// ==================== INVENTORY ====================

model InventoryItem {
  id             String @id @default(cuid())
  organizationId String
  productId      String

  // Location
  locationCode String?
  binLocation  String?

  // Quantities
  quantityOnHand      Int @default(0)
  quantityReserved    Int @default(0)
  quantityAvailable   Int @default(0)
  reorderLevel        Int?
  reorderQuantity     Int?

  // Costing
  averageCost   Decimal?
  lastCost      Decimal?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization           @relation(fields: [organizationId], references: [id])
  product      Product                @relation(fields: [productId], references: [id])
  transactions InventoryTransaction[]

  @@unique([organizationId, productId, locationCode])
  @@index([organizationId])
  @@index([productId])
  @@map("inventory_items")
}

model InventoryTransaction {
  id             String @id @default(cuid())
  organizationId String
  productId      String
  inventoryItemId String

  // Transaction Details
  type        String // PURCHASE, SALE, ADJUSTMENT, TRANSFER
  quantity    Int
  unitCost    Decimal?
  totalCost   Decimal?

  // References
  referenceType String? // PurchaseOrder, Invoice, etc.
  referenceId   String?

  // Notes
  notes String?

  // Timestamp
  transactionDate DateTime @default(now())
  createdAt       DateTime @default(now())

  // Relationships
  organization  Organization  @relation(fields: [organizationId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])

  @@index([organizationId])
  @@index([productId])
  @@index([inventoryItemId])
  @@index([transactionDate])
  @@map("inventory_transactions")
}

// ==================== TIME TRACKING ====================

model EmployeeTimeEntry {
  id             String @id @default(cuid())
  organizationId String
  employeeId     String

  // Time Details
  startTime DateTime
  endTime   DateTime?
  hours     Decimal?

  // Work Details
  description String?
  projectId   String?
  isBillable  Boolean @default(false)
  hourlyRate  Decimal?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  employee     Employee     @relation(fields: [employeeId], references: [id])

  @@index([organizationId])
  @@index([employeeId])
  @@index([startTime])
  @@map("employee_time_entries")
}

// ==================== INTAKE FORMS ====================

model IntakeFormTemplate {
  id             String @id @default(cuid())
  organizationId String

  // Template Details
  name        String
  description String?
  isDefault   Boolean @default(false)
  isActive    Boolean @default(true)

  // Form Configuration (JSON)
  formSchema   String // JSON schema for form fields
  validationRules String? // JSON validation rules

  // Branding
  headerText      String?
  footerText      String?
  thankYouMessage String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([isDefault])
  @@map("intake_form_templates")
}

// ==================== GOOGLE CALENDAR INTEGRATION ====================

model UserGoogleToken {
  id             String @id @default(cuid())
  organizationId String
  userId         String

  // OAuth Tokens
  accessToken  String
  refreshToken String
  tokenType    String  @default("Bearer")
  expiresAt    DateTime

  // Scope
  scope String // Space-separated scopes

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@index([expiresAt])
  @@map("user_google_tokens")
}

// ==================== SMS MESSAGING ====================

model SmsMessage {
  id             String @id @default(cuid())
  organizationId String

  // Message Details
  to      String
  from    String
  body    String
  status  String @default("PENDING") // PENDING, SENT, DELIVERED, FAILED

  // Twilio Details
  twilioSid       String?
  twilioStatus    String?
  twilioErrorCode String?
  twilioErrorMsg  String?

  // Entity Reference
  entityType String? // Appointment, Quote, Invoice, etc.
  entityId   String?

  // Timestamps
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([status])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("sms_messages")
}

// ==================== REFERENCE DATA ====================

model Country {
  id          String @id @default(cuid())
  code        String @unique
  name        String
  phonePrefix String

  @@map("countries")
}

model Currency {
  id     String @id @default(cuid())
  code   String @unique
  name   String
  symbol String

  @@map("currencies")
}

model TaxRate {
  id            String    @id @default(cuid())
  code          String    @unique
  name          String
  rate          Decimal
  countryCode   String
  stateProvince String?
  isDefault     Boolean   @default(false)
  effectiveDate DateTime
  expiryDate    DateTime?

  @@index([countryCode])
  @@map("tax_rates")
}

model ProductCategory {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?
  parentId    String?

  // Relationships
  parent   ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ProductCategory[] @relation("CategoryHierarchy")
  products Product[]

  @@map("product_categories")
}

model ServiceCategory {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?
  parentId    String?

  // Relationships
  parent   ServiceCategory?  @relation("ServiceCategoryHierarchy", fields: [parentId], references: [id])
  children ServiceCategory[] @relation("ServiceCategoryHierarchy")
  services Service[]

  @@map("service_categories")
}

// ==================== DOCUMENT MANAGEMENT ====================

model Document {
  id             String @id @default(cuid())
  organizationId String
  uploadedById   String

  // File Information
  filename     String // Original filename
  originalName String // Original filename from upload
  mimeType     String // MIME type (e.g., application/pdf, image/jpeg)
  size         Int // File size in bytes
  path         String // Storage path/URL
  hash         String // SHA-256 hash for integrity

  // Document Metadata
  title       String? // User-friendly title
  description String? // Document description
  category    String // DocumentCategory enum
  tags        String? // JSON array of tags

  // Entity Associations (polymorphic relationships)
  entityType String? // Customer, Invoice, Quote, Payment, etc.
  entityId   String? // ID of the associated entity

  // File Processing
  isProcessed      Boolean @default(false)
  processingStatus String  @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  processingError  String? // Error message if processing failed
  thumbnailPath    String? // Path to generated thumbnail
  ocrText          String? // Extracted text from OCR (if applicable)

  // Security & Access
  isPublic      Boolean @default(false)
  isEncrypted   Boolean @default(false)
  encryptionKey String? // Document-specific encryption key
  accessLevel   String  @default("PRIVATE") // PUBLIC, PRIVATE, RESTRICTED

  // Versioning
  version         Int     @default(1)
  parentId        String? // Parent document for versioning
  isLatestVersion Boolean @default(true)

  // Retention & Compliance
  retentionDate DateTime? // When document can be deleted
  isArchived    Boolean   @default(false)
  archivedAt    DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  uploadedBy   User         @relation(fields: [uploadedById], references: [id])

  @@index([organizationId])
  @@index([uploadedById])
  @@index([category])
  @@index([entityType, entityId])
  @@index([hash])
  @@map("documents")
}

// ==================== SEARCHABLE ENCRYPTION ====================

model SearchIndex {
  id             String @id @default(cuid())
  organizationId String

  // Entity reference
  entityType String
  entityId   String
  fieldName  String

  // Search indexes
  blindIndex   String // Hash for exact matching
  searchTokens String // JSON array of tokens for partial matching

  // Key information
  keyVersion Int
  algorithm  String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime? // Optional TTL for PII compliance

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([blindIndex])
  @@index([organizationId])
  @@index([entityType, entityId])
  @@index([fieldName])
  @@index([blindIndex])
  @@index([expiresAt])
  @@map("search_indexes")
}

model EncryptionAuditLog {
  id             String @id @default(cuid())
  organizationId String

  // Operation details
  operation  String // ENCRYPT, DECRYPT, KEY_ROTATION, KEY_DERIVATION
  entityType String?
  entityId   String?
  fieldName  String?

  // Performance metrics
  duration Int // Milliseconds
  dataSize Int? // Bytes

  // Key information
  keyVersion Int
  algorithm  String

  // Security context
  userId    String?
  ipAddress String?
  userAgent String?

  // Status
  success      Boolean
  errorMessage String?

  // Timestamp
  timestamp DateTime @default(now())

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([operation])
  @@index([timestamp])
  @@index([success])
  @@map("encryption_audit_logs")
}

// ==================== ADMIN PANEL BACKEND ====================

model SystemLog {
  id             String @id @default(cuid())
  timestamp      DateTime @default(now())
  level          String // DEBUG, INFO, WARN, ERROR
  message        String
  source         String // Service/module name (e.g., 'auth', 'invoice', 'encryption')

  // Context
  userId         String?
  organizationId String?
  metadata       String? // JSON metadata
  stackTrace     String? // For errors

  // Timestamps
  createdAt DateTime @default(now())

  @@index([timestamp])
  @@index([level])
  @@index([source])
  @@index([organizationId])
  @@index([userId])
  @@map("system_logs")
}

model IntakeSettings {
  id             String @id @default(cuid())
  organizationId String @unique

  // General settings
  enabled                      Boolean @default(true)
  requireApproval              Boolean @default(false)
  notifyOnSubmission           Boolean @default(true)

  // Email notifications
  notificationEmails           String? // JSON array of admin emails
  customerConfirmationEmail    Boolean @default(true)

  // Form configuration
  customFields                 String? // JSON array of IntakeCustomField objects
  requiredFields               String? // JSON array of required field names

  // Branding
  thankYouMessage              String?
  redirectUrl                  String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("intake_settings")
}

model SystemIntegration {
  id             String @id @default(cuid())
  name           String
  type           String // STRIPE, QUICKBOOKS, SENDGRID, TWILIO, SLACK, CUSTOM
  status         String @default("INACTIVE") // ACTIVE, INACTIVE, ERROR, TESTING
  enabled        Boolean @default(false)

  // Configuration (encrypted in database)
  configEncrypted String // Encrypted JSON configuration

  // Monitoring
  lastSync        DateTime?
  lastError       String?
  syncFrequency   String? // HOURLY, DAILY, WEEKLY, MANUAL

  // Scope
  organizationId  String? // Null for system-wide integrations

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  createdBy String

  // Relationships
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User          @relation("CreatedSystemIntegrations", fields: [createdBy], references: [id])

  @@index([type])
  @@index([status])
  @@index([organizationId])
  @@index([enabled])
  @@map("system_integrations")
}

model FeatureToggle {
  id  String @id @default(cuid())
  key String @unique // Unique key (e.g., 'beta_dashboard')

  // Toggle Details
  name        String
  description String
  enabled     Boolean @default(false)

  // Targeting
  scope               String  @default("GLOBAL") // GLOBAL, ORGANIZATION, USER
  targetOrganizations String? // JSON array of organization IDs
  targetUsers         String? // JSON array of user IDs
  rolloutPercentage   Int?    @default(0) // 0-100, gradual rollout

  // Metadata
  createdBy String
  updatedBy String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([enabled])
  @@index([scope])
  @@map("feature_toggles")
}
// ==================== MAINTENANCE WINDOWS ====================

model MaintenanceWindow {
  id    String @id @default(cuid())
  title String
  description String

  // Status
  status String @default("PLANNED") // PLANNED, IN_PROGRESS, COMPLETED, CANCELLED

  // Schedule
  scheduledStart DateTime
  scheduledEnd   DateTime
  actualStart    DateTime?
  actualEnd      DateTime?
  duration       Int // Estimated duration in minutes

  // Impact
  impact           String // LOW, MEDIUM, HIGH, CRITICAL
  affectedServices String // JSON array of service names
  notifyUsers      Boolean @default(false)

  // Details
  tasks           String // JSON array of MaintenanceTask objects
  notes           String?
  completionNotes String?

  // Metadata
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([scheduledStart])
  @@index([createdAt])
  @@map("maintenance_windows")
}

// ==================== SUBSCRIPTION & PLAN MANAGEMENT ====================

model SubscriptionPlan {
  id          String  @id @default(cuid())
  name        String // e.g., 'Professional', 'Enterprise'
  description String
  
  // Pricing
  price    Decimal
  interval String // MONTHLY, QUARTERLY, YEARLY
  currency String @default("CAD")
  
  // Features
  features String // JSON array of feature keys
  
  // Limits
  maxUsers         Int?
  maxOrganizations Int?
  
  // Status
  status   String  @default("ACTIVE") // ACTIVE, INACTIVE
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  subscriptions OrganizationSubscription[]
  
  @@index([status])
  @@map("subscription_plans")
}

model OrganizationSubscription {
  id             String @id @default(cuid())
  organizationId String
  planId         String
  
  // Status
  status String @default("ACTIVE") // ACTIVE, CANCELLED, EXPIRED, SUSPENDED
  
  // Billing
  startDate       DateTime
  endDate         DateTime?
  nextBillingDate DateTime?
  autoRenew       Boolean  @default(true)
  
  // Payment
  paymentMethod   String?
  lastPaymentDate DateTime?
  
  // Cancellation
  cancelledAt DateTime?
  cancelReason String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  organization Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan         SubscriptionPlan @relation(fields: [planId], references: [id])
  
  @@index([organizationId])
  @@index([planId])
  @@index([status])
  @@index([nextBillingDate])
  @@map("organization_subscriptions")
}

// ==================== SYSTEM BACKUPS ====================

model SystemBackup {
  id       String @id @default(cuid())
  type     String // FULL, INCREMENTAL, DATABASE_ONLY, FILES_ONLY
  status   String @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED
  
  // Backup details
  filename String
  size     BigInt @default(0) // Size in bytes
  
  // Timing
  startedAt    DateTime?
  completedAt  DateTime?
  
  // Error tracking
  error    String?
  
  // Metadata (encrypted if contains sensitive info)
  metadata String? // JSON - backup configuration, retention policy, etc.
  
  // Audit
  createdBy String
  createdAt DateTime @default(now())
  deletedAt DateTime?
  deletedBy String?
  
  // Relationships
  creator User  @relation("CreatedSystemBackups", fields: [createdBy], references: [id])
  deleter User? @relation("DeletedSystemBackups", fields: [deletedBy], references: [id])
  
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([startedAt])
  @@map("system_backups")
}
