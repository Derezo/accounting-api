/**
 * Generated TypeScript types from OpenAPI specification
 *
 * @file api.ts
 * @generated This file is auto-generated. Do not edit manually.
 * @source ../../docs/openapi.yaml
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /**
     * Basic health check
     * @description Check if the API is running and responsive
     */
    get: {
      responses: {
        /** @description API is healthy */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              status: "healthy";
              timestamp: components["schemas"]["Timestamp"];
              /** @example production */
              environment?: string;
              /** @example 1.0.0 */
              version?: string;
            };
          };
        };
      };
    };
  };
  "/health/db": {
    /**
     * Database health check
     * @description Check database connectivity and performance
     */
    get: {
      responses: {
        /** @description Database is healthy */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              status: "healthy";
              /** @enum {string} */
              database: "connected";
              /** @description Database response time in milliseconds */
              responseTime?: number;
            };
          };
        };
        /** @description Database is unhealthy */
        503: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/login": {
    /**
     * User authentication
     * @description Authenticate user with email/password and receive JWT tokens
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: email
             * @description User email address
             * @example john.doe@acme.com
             */
            email: string;
            /**
             * Format: password
             * @description User password
             * @example SecurePassword123!
             */
            password: string;
            /**
             * @description Extend session duration
             * @default false
             */
            rememberMe?: boolean;
            /**
             * @description Two-factor authentication code (if enabled)
             * @example 123456
             */
            twoFactorCode?: string;
          };
        };
      };
      responses: {
        /** @description Authentication successful */
        200: {
          content: {
            "application/json": {
              user: components["schemas"]["User"];
              tokens: {
                /** @description JWT access token */
                accessToken: string;
                /** @description JWT refresh token */
                refreshToken: string;
                /**
                 * @description Token expiration time in seconds
                 * @example 3600
                 */
                expiresIn: number;
              };
              /** @description Session identifier */
              sessionId: string;
              /**
               * @description Whether 2FA is required
               * @default false
               */
              requiresTwoFactor?: boolean;
            };
          };
        };
        /** @description Authentication failed */
        401: {
          content: {
            "application/json": components["schemas"]["AuthenticationError"];
          };
        };
        /** @description Account locked due to failed attempts */
        423: {
          content: {
            "application/json": components["schemas"]["AuthenticationError"] & {
              details?: {
                lockedUntil?: components["schemas"]["Timestamp"];
                remainingAttempts?: number;
              };
            };
          };
        };
      };
    };
  };
  "/auth/logout": {
    /**
     * User logout
     * @description Invalidate current session and tokens
     */
    post: {
      responses: {
        /** @description Logout successful */
        200: {
          content: {
            "application/json": {
              /** @example Logout successful */
              message?: string;
              timestamp?: components["schemas"]["Timestamp"];
            };
          };
        };
        401: components["responses"]["AuthenticationError"];
      };
    };
  };
  "/auth/refresh": {
    /**
     * Refresh JWT tokens
     * @description Get new access token using refresh token
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Valid refresh token */
            refreshToken: string;
          };
        };
      };
      responses: {
        /** @description Token refresh successful */
        200: {
          content: {
            "application/json": {
              /** @description New JWT access token */
              accessToken: string;
              /** @description New refresh token */
              refreshToken: string;
              /** @description Token expiration time in seconds */
              expiresIn: number;
            };
          };
        };
        /** @description Invalid or expired refresh token */
        401: {
          content: {
            "application/json": components["schemas"]["AuthenticationError"];
          };
        };
      };
    };
  };
  "/auth/register": {
    /**
     * User registration
     * @description Register a new user account
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: email
             * @description User email address
             * @example new.user@acme.com
             */
            email: string;
            /**
             * Format: password
             * @description User password (min 8 characters)
             * @example SecurePassword123!
             */
            password: string;
            /**
             * Format: password
             * @description Password confirmation
             */
            confirmPassword: string;
            /**
             * @description User first name
             * @example Jane
             */
            firstName: string;
            /**
             * @description User last name
             * @example Smith
             */
            lastName: string;
            /**
             * @description Organization name for new organization
             * @example Smith Consulting
             */
            organizationName?: string;
            /**
             * @description Phone number
             * @example +1-555-123-4567
             */
            phone?: string;
            /** @description Organization invite token (optional) */
            inviteToken?: string;
          };
        };
      };
      responses: {
        /** @description Registration successful */
        201: {
          content: {
            "application/json": {
              user?: components["schemas"]["User"];
              organization?: components["schemas"]["Organization"];
              /** @example Registration successful. Please verify your email. */
              message?: string;
            };
          };
        };
        /** @description Registration failed due to validation errors */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Email already exists */
        409: {
          content: {
            "application/json": components["schemas"]["ConflictError"];
          };
        };
      };
    };
  };
  "/auth/forgot-password": {
    /**
     * Initiate password reset
     * @description Send password reset email to user
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /**
             * Format: email
             * @description User email address
             */
            email: string;
          };
        };
      };
      responses: {
        /** @description Password reset email sent (always returns 200 for security) */
        200: {
          content: {
            "application/json": {
              /** @example If an account with that email exists, a password reset link has been sent. */
              message?: string;
            };
          };
        };
      };
    };
  };
  "/auth/reset-password": {
    /**
     * Complete password reset
     * @description Reset password using token from email
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Password reset token from email */
            token: string;
            /**
             * Format: password
             * @description New password
             */
            password: string;
            /**
             * Format: password
             * @description Password confirmation
             */
            confirmPassword: string;
          };
        };
      };
      responses: {
        /** @description Password reset successful */
        200: {
          content: {
            "application/json": {
              /** @example Password reset successful */
              message?: string;
            };
          };
        };
        /** @description Invalid or expired token */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
      };
    };
  };
  "/auth/verify-email": {
    /**
     * Verify email address
     * @description Verify user email with token
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Email verification token */
            token: string;
          };
        };
      };
      responses: {
        /** @description Email verification successful */
        200: {
          content: {
            "application/json": {
              /** @example Email verified successfully */
              message?: string;
            };
          };
        };
        /** @description Invalid or expired verification token */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
      };
    };
  };
  "/auth/me": {
    /**
     * Get current user profile
     * @description Retrieve the authenticated user's profile information
     */
    get: {
      responses: {
        /** @description User profile retrieved successfully */
        200: {
          content: {
            "application/json": {
              user?: components["schemas"]["User"];
              organization?: components["schemas"]["Organization"];
              /**
               * @description User permissions for current organization
               * @example [
               *   "customers:read",
               *   "quotes:write",
               *   "invoices:read"
               * ]
               */
              permissions?: string[];
            };
          };
        };
        401: components["responses"]["AuthenticationError"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Format: date-time
     * @description ISO 8601 timestamp
     * @example 2023-12-01T10:30:00.000Z
     */
    Timestamp: string;
    /**
     * @description ISO 4217 currency code
     * @default CAD
     * @enum {string}
     */
    Currency: "CAD" | "USD" | "EUR" | "GBP";
    Money: {
      /**
       * Format: decimal
       * @description Monetary amount with proper decimal precision
       * @example 1234.56
       */
      amount: number;
      currency: components["schemas"]["Currency"];
    };
    /**
     * @description User role hierarchy for authorization
     * @enum {string}
     */
    UserRole: "VIEWER" | "EMPLOYEE" | "ACCOUNTANT" | "MANAGER" | "ADMIN" | "SUPER_ADMIN";
    /**
     * @description Customer service tier classification
     * @enum {string}
     */
    CustomerTier: "PERSONAL" | "SMALL_BUSINESS" | "ENTERPRISE";
    /**
     * @description Customer account status
     * @enum {string}
     */
    CustomerStatus: "PROSPECT" | "ACTIVE" | "INACTIVE" | "SUSPENDED";
    /**
     * @description Quote workflow status
     * @enum {string}
     */
    QuoteStatus: "DRAFT" | "SENT" | "VIEWED" | "ACCEPTED" | "REJECTED" | "EXPIRED";
    /**
     * @description Invoice payment status
     * @enum {string}
     */
    InvoiceStatus: "DRAFT" | "SENT" | "VIEWED" | "PAID" | "OVERDUE" | "CANCELLED";
    /**
     * @description Payment processing method
     * @enum {string}
     */
    PaymentMethod: "STRIPE_CARD" | "E_TRANSFER" | "CASH" | "BANK_TRANSFER" | "CHECK";
    /**
     * @description Payment processing status
     * @enum {string}
     */
    PaymentStatus: "PENDING" | "COMPLETED" | "FAILED" | "REFUNDED" | "CANCELLED";
    /**
     * @description Project lifecycle status
     * @enum {string}
     */
    ProjectStatus: "QUOTED" | "ACCEPTED" | "IN_PROGRESS" | "ON_HOLD" | "COMPLETED" | "CANCELLED";
    /** @description User account information */
    User: {
      id: string;
      email: string;
      firstName?: string;
      lastName?: string;
      role: components["schemas"]["UserRole"];
      organizationId: string;
      isActive?: boolean;
      emailVerified?: boolean;
      createdAt?: components["schemas"]["Timestamp"];
      updatedAt?: components["schemas"]["Timestamp"];
    };
    /** @description Organization information */
    Organization: {
      id: string;
      name: string;
      domain?: string;
      email?: string;
      phone?: string;
      type?: string;
      isActive?: boolean;
      createdAt?: components["schemas"]["Timestamp"];
      updatedAt?: components["schemas"]["Timestamp"];
    };
    Error: {
      /**
       * @description Error type identifier
       * @example VALIDATION_ERROR
       */
      error: string;
      /**
       * @description Human-readable error message
       * @example Invalid input parameters
       */
      message: string;
      /**
       * @description Additional error context and field-specific messages
       * @example {
       *   "field": "email",
       *   "code": "INVALID_FORMAT"
       * }
       */
      details?: {
        [key: string]: unknown;
      };
      /**
       * @description Unique request identifier for debugging
       * @example req_abc123def456
       */
      requestId?: string;
      timestamp: components["schemas"]["Timestamp"];
    };
    ValidationError: components["schemas"]["Error"] & {
      /** @enum {unknown} */
      error?: "VALIDATION_ERROR";
      details?: {
        fields?: {
            field?: string;
            message?: string;
            value?: string;
          }[];
      };
    };
    AuthenticationError: components["schemas"]["Error"] & ({
      /** @enum {unknown} */
      error?: "AUTHENTICATION_REQUIRED" | "INVALID_TOKEN" | "TOKEN_EXPIRED";
    });
    AuthorizationError: components["schemas"]["Error"] & ({
      /** @enum {unknown} */
      error?: "INSUFFICIENT_PERMISSIONS" | "ORGANIZATION_ACCESS_DENIED";
    });
    NotFoundError: components["schemas"]["Error"] & {
      /** @enum {unknown} */
      error?: "RESOURCE_NOT_FOUND";
    };
    ConflictError: components["schemas"]["Error"] & ({
      /** @enum {unknown} */
      error?: "RESOURCE_CONFLICT" | "DUPLICATE_ENTRY";
    });
    RateLimitError: components["schemas"]["Error"] & {
      /** @enum {unknown} */
      error?: "RATE_LIMIT_EXCEEDED";
      details?: {
        limit?: number;
        remaining?: number;
        resetTime?: number;
      };
    };
  };
  responses: {
    /** @description Operation successful */
    Success: {
      content: {
        "application/json": {
          /** @example true */
          success?: boolean;
          /** @example Operation completed successfully */
          message?: string;
          timestamp?: components["schemas"]["Timestamp"];
        };
      };
    };
    /** @description Authentication required or invalid */
    AuthenticationError: {
      content: {
        "application/json": components["schemas"]["AuthenticationError"];
      };
    };
    /** @description Insufficient permissions */
    AuthorizationError: {
      content: {
        "application/json": components["schemas"]["AuthorizationError"];
      };
    };
    /** @description Request validation failed */
    ValidationError: {
      content: {
        "application/json": components["schemas"]["ValidationError"];
      };
    };
    /** @description Resource not found */
    NotFoundError: {
      content: {
        "application/json": components["schemas"]["NotFoundError"];
      };
    };
    /** @description Resource conflict */
    ConflictError: {
      content: {
        "application/json": components["schemas"]["ConflictError"];
      };
    };
    /** @description Rate limit exceeded */
    RateLimitError: {
      content: {
        "application/json": components["schemas"]["RateLimitError"];
      };
    };
    /** @description Internal server error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    PaginationMeta: {
      content: never;
    };
    Organization: {
      content: never;
    };
    User: {
      content: never;
    };
    Customer: {
      content: never;
    };
    Person: {
      content: never;
    };
    Business: {
      content: never;
    };
    Address: {
      content: never;
    };
    CustomerAddress: {
      content: never;
    };
  };
  parameters: {
    /** @description Unique identifier for the organization (multi-tenant isolation) */
    OrganizationId: string;
    /** @description Unique identifier for the user */
    UserId: string;
    /** @description Unique identifier for the resource */
    ResourceId: string;
    /** @description Page number for pagination (1-based) */
    Page?: number;
    /** @description Number of items per page */
    Limit?: number;
    /** @description Sort field and direction (field:asc or field:desc) */
    Sort?: string;
    /** @description Search term for text-based filtering */
    Search?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
