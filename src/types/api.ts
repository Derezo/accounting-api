/**
 * Generated TypeScript types from OpenAPI specification
 *
 * @file api.ts
 * @generated This file is auto-generated. Do not edit manually.
 * @source ../../docs/openapi.yaml
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /**
     * Health check
     * @description Basic health check endpoint
     */
    get: {
      responses: {
        /** @description API is healthy */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              status: "healthy";
              timestamp: components["schemas"]["Timestamp"];
              /** @example production */
              environment?: string;
              /** @example 1.0.0 */
              version?: string;
            };
          };
        };
      };
    };
  };
  "/health/db": {
    /**
     * Database health check
     * @description Check database connectivity
     */
    get: {
      responses: {
        /** @description Database is healthy */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              status: "healthy";
              /** @enum {string} */
              database: "connected";
            };
          };
        };
        /** @description Database is unhealthy */
        503: {
          content: {
            "application/json": {
              /** @enum {string} */
              status: "unhealthy";
              /** @enum {string} */
              database: "disconnected";
              /** @description Error details (only in development) */
              error?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/auth/login": {
    /**
     * User login
     * @description Authenticate user and return JWT tokens.
     *
     * ## Security Requirements
     * - Valid email and password combination
     * - Valid organization ID
     * - Account must be active
     *
     * ## Response
     * Returns both access token (15 min expiry) and refresh token (7 day expiry).
     *
     * ## Rate Limiting
     * This endpoint has additional rate limiting (5 requests per minute per IP).
     */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "email": "admin@acme.com",
           *   "password": "SecurePassword123!",
           *   "organizationId": "550e8400-e29b-41d4-a716-446655440000"
           * }
           */
          "application/json": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        /** @description Login successful */
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
        429: components["responses"]["TooManyRequests"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/auth/logout": {
    /**
     * User logout
     * @description Logout user and invalidate refresh token.
     *
     * ## Security
     * - Requires valid JWT token
     * - Invalidates the provided refresh token
     * - Clears any server-side sessions
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RefreshTokenRequest"];
        };
      };
      responses: {
        /** @description Logout successful */
        200: {
          content: {
            "application/json": {
              /** @example Logout successful */
              message: string;
            };
          };
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/auth/refresh": {
    /**
     * Refresh access token
     * @description Use refresh token to obtain new access token.
     *
     * ## Security
     * - Requires valid refresh token
     * - Returns new access token with 15 minute expiry
     * - Refresh token is single-use (new refresh token returned)
     */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
           * }
           */
          "application/json": components["schemas"]["RefreshTokenRequest"];
        };
      };
      responses: {
        /** @description Token refresh successful */
        200: {
          content: {
            "application/json": {
              /**
               * @description New JWT access token
               * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
               */
              accessToken: string;
              /**
               * @description New refresh token
               * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
               */
              refreshToken: string;
            };
          };
        };
        400: components["responses"]["BadRequest"];
        401: components["responses"]["Unauthorized"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/auth/register": {
    /**
     * Register new user and organization
     * @description Register a new user account and create a new organization.
     *
     * ## Features
     * - Creates new organization
     * - Creates admin user for the organization
     * - Sends welcome email (if email service configured)
     * - Returns login tokens immediately
     *
     * ## Validation
     * - Email must be unique across the system
     * - Password must meet security requirements
     * - Organization name must be provided
     */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "firstName": "John",
           *   "lastName": "Doe",
           *   "email": "john@newcompany.com",
           *   "password": "SecurePassword123!",
           *   "phone": "+1 (555) 123-4567",
           *   "organizationName": "New Company Inc",
           *   "organizationType": "SINGLE_BUSINESS"
           * }
           */
          "application/json": components["schemas"]["RegisterRequest"];
        };
      };
      responses: {
        /** @description Registration successful */
        201: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        409: components["responses"]["Conflict"];
        429: components["responses"]["TooManyRequests"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Format: uuid
     * @example 550e8400-e29b-41d4-a716-446655440000
     */
    UUID: string;
    /**
     * Format: date-time
     * @example 2023-12-01T10:30:00.000Z
     */
    Timestamp: string;
    /**
     * @description Decimal value with up to 2 decimal places
     * @example 123.45
     */
    Decimal: string;
    /**
     * Format: email
     * @example user@example.com
     */
    Email: string;
    /** @example +1 (555) 123-4567 */
    PhoneNumber: string;
    /**
     * @description User roles with different permission levels:
     * - `SUPER_ADMIN`: Full system access across all organizations
     * - `ADMIN`: Organization admin with full access within organization
     * - `MANAGER`: Can manage customers, quotes, invoices, projects
     * - `ACCOUNTANT`: Focus on financial operations and reporting
     * - `EMPLOYEE`: Limited access to assigned projects and tasks
     * - `VIEWER`: Read-only access to organization data
     *
     * @enum {string}
     */
    UserRole: "SUPER_ADMIN" | "ADMIN" | "MANAGER" | "ACCOUNTANT" | "EMPLOYEE" | "VIEWER";
    /** @enum {string} */
    OrganizationType: "SINGLE_BUSINESS" | "MULTI_LOCATION" | "FRANCHISE" | "ENTERPRISE";
    /** @enum {string} */
    CustomerType: "PERSON" | "BUSINESS";
    /** @enum {string} */
    CustomerTier: "PERSONAL" | "SMALL_BUSINESS" | "ENTERPRISE" | "EMERGENCY";
    /** @enum {string} */
    CustomerStatus: "PROSPECT" | "ACTIVE" | "INACTIVE" | "SUSPENDED" | "ARCHIVED";
    /** @enum {string} */
    BusinessType: "SOLE_PROPRIETORSHIP" | "PARTNERSHIP" | "CORPORATION" | "LLC" | "NON_PROFIT" | "GOVERNMENT";
    /** @enum {string} */
    QuoteStatus: "DRAFT" | "SENT" | "VIEWED" | "ACCEPTED" | "REJECTED" | "EXPIRED" | "REVISED";
    /** @enum {string} */
    InvoiceStatus: "DRAFT" | "SENT" | "VIEWED" | "PARTIALLY_PAID" | "PAID" | "OVERDUE" | "CANCELLED" | "REFUNDED";
    /** @enum {string} */
    PaymentMethod: "STRIPE_CARD" | "INTERAC_ETRANSFER" | "CASH" | "BANK_TRANSFER" | "CHEQUE" | "OTHER";
    /** @enum {string} */
    PaymentStatus: "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED" | "CANCELLED" | "REFUNDED";
    /** @enum {string} */
    ProjectStatus: "QUOTED" | "APPROVED" | "SCHEDULED" | "IN_PROGRESS" | "ON_HOLD" | "COMPLETED" | "CANCELLED";
    Address: {
      /** @example 123 Main St */
      street: string;
      /** @example Toronto */
      city: string;
      /** @example ON */
      province: string;
      /** @example M5V 3A8 */
      postalCode: string;
      /**
       * @default Canada
       * @example Canada
       */
      country?: string;
    };
    PaginationMeta: {
      /** @description Total number of items */
      total: number;
      /** @description Number of items per page */
      limit: number;
      /** @description Number of items skipped */
      offset: number;
      /** @description Whether there are more items */
      hasNext: boolean;
      /** @description Whether there are previous items */
      hasPrev: boolean;
    };
    /**
     * @example {
     *   "error": "ValidationError",
     *   "message": "Request validation failed",
     *   "details": [
     *     {
     *       "field": "email",
     *       "message": "Invalid email format",
     *       "code": "INVALID_EMAIL"
     *     }
     *   ]
     * }
     */
    ErrorResponse: {
      /** @description Error type */
      error: string;
      /** @description Human-readable error message */
      message: string;
      details?: {
          field?: string;
          message?: string;
          code?: string;
        }[];
    };
    ValidationError: components["schemas"]["ErrorResponse"] & {
      /** @enum {unknown} */
      error?: "ValidationError";
    };
    AuthenticationError: components["schemas"]["ErrorResponse"] & {
      /** @enum {unknown} */
      error?: "AuthenticationError";
    };
    AuthorizationError: components["schemas"]["ErrorResponse"] & {
      /** @enum {unknown} */
      error?: "AuthorizationError";
    };
    NotFoundError: components["schemas"]["ErrorResponse"] & {
      /** @enum {unknown} */
      error?: "NotFoundError";
    };
    ConflictError: components["schemas"]["ErrorResponse"] & {
      /** @enum {unknown} */
      error?: "ConflictError";
    };
    RateLimitError: components["schemas"]["ErrorResponse"] & {
      /** @enum {unknown} */
      error?: "RateLimitError";
    };
    InternalServerError: components["schemas"]["ErrorResponse"] & {
      /** @enum {unknown} */
      error?: "InternalServerError";
    };
    LoginRequest: {
      email: components["schemas"]["Email"];
      /** @example SecurePassword123! */
      password: string;
      organizationId: components["schemas"]["UUID"];
    };
    LoginResponse: {
      /**
       * @description JWT access token (expires in 15 minutes)
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      accessToken: string;
      /**
       * @description JWT refresh token (expires in 7 days)
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      refreshToken: string;
      user: components["schemas"]["User"];
      organization: components["schemas"]["Organization"];
    };
    RefreshTokenRequest: {
      /**
       * @description Valid refresh token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      refreshToken: string;
    };
    RegisterRequest: {
      /** @example John */
      firstName: string;
      /** @example Doe */
      lastName: string;
      email: components["schemas"]["Email"];
      /**
       * @description Must contain at least one uppercase letter, one lowercase letter, one number, and one special character
       * @example SecurePassword123!
       */
      password: string;
      phone?: components["schemas"]["PhoneNumber"];
      /** @example Acme Corporation */
      organizationName: string;
      organizationType: components["schemas"]["OrganizationType"];
    };
    User: {
      id: components["schemas"]["UUID"];
      /** @example John */
      firstName: string;
      /** @example Doe */
      lastName: string;
      email: components["schemas"]["Email"];
      phone?: components["schemas"]["PhoneNumber"];
      role: components["schemas"]["UserRole"];
      /** @example true */
      isActive: boolean;
      lastLogin?: components["schemas"]["Timestamp"];
      createdAt: components["schemas"]["Timestamp"];
      updatedAt: components["schemas"]["Timestamp"];
      organizationId: components["schemas"]["UUID"];
    };
    CreateUserRequest: {
      /** @example John */
      firstName: string;
      /** @example Doe */
      lastName: string;
      email: components["schemas"]["Email"];
      phone?: components["schemas"]["PhoneNumber"];
      role: components["schemas"]["UserRole"];
      /** @example SecurePassword123! */
      password: string;
    };
    UpdateUserRequest: {
      /** @example John */
      firstName?: string;
      /** @example Doe */
      lastName?: string;
      phone?: components["schemas"]["PhoneNumber"];
      role?: components["schemas"]["UserRole"];
      isActive?: boolean;
    };
    Organization: {
      id: components["schemas"]["UUID"];
      /** @example Acme Corporation */
      name: string;
      type: components["schemas"]["OrganizationType"];
      /**
       * Format: uri
       * @example https://acme.com
       */
      website?: string;
      phone?: components["schemas"]["PhoneNumber"];
      email?: components["schemas"]["Email"];
      address?: components["schemas"]["Address"];
      /** @example 123456789 */
      taxNumber?: string;
      /** @example true */
      isActive: boolean;
      settings?: {
        /** @example America/Toronto */
        timezone?: string;
        /** @example CAD */
        currency?: string;
        /**
         * Format: date
         * @example 2024-01-01
         */
        fiscalYearStart?: string;
      };
      createdAt: components["schemas"]["Timestamp"];
      updatedAt: components["schemas"]["Timestamp"];
    };
    CreateOrganizationRequest: {
      /** @example Acme Corporation */
      name: string;
      type: components["schemas"]["OrganizationType"];
      /**
       * Format: uri
       * @example https://acme.com
       */
      website?: string;
      phone?: components["schemas"]["PhoneNumber"];
      email?: components["schemas"]["Email"];
      address?: components["schemas"]["Address"];
      /** @example 123456789 */
      taxNumber?: string;
    };
    UpdateOrganizationRequest: {
      /** @example Acme Corporation */
      name?: string;
      /**
       * Format: uri
       * @example https://acme.com
       */
      website?: string;
      phone?: components["schemas"]["PhoneNumber"];
      email?: components["schemas"]["Email"];
      address?: components["schemas"]["Address"];
      /** @example 123456789 */
      taxNumber?: string;
      isActive?: boolean;
    };
    Customer: {
      id: components["schemas"]["UUID"];
      type: components["schemas"]["CustomerType"];
      tier: components["schemas"]["CustomerTier"];
      status: components["schemas"]["CustomerStatus"];
      /** @example Jane */
      firstName?: string;
      /** @example Smith */
      lastName?: string;
      /** @example Smith Enterprises */
      companyName?: string;
      businessType?: components["schemas"]["BusinessType"];
      email: components["schemas"]["Email"];
      phone?: components["schemas"]["PhoneNumber"];
      address?: components["schemas"]["Address"];
      billingAddress?: components["schemas"]["Address"];
      /** @example 987654321 */
      taxNumber?: string;
      /** @example Preferred customer with expedited service */
      notes?: string;
      totalRevenue?: components["schemas"]["Decimal"];
      lastContactDate?: components["schemas"]["Timestamp"];
      createdAt: components["schemas"]["Timestamp"];
      updatedAt: components["schemas"]["Timestamp"];
      organizationId: components["schemas"]["UUID"];
    };
    CreateCustomerRequest: {
      type: components["schemas"]["CustomerType"];
      tier: components["schemas"]["CustomerTier"];
      /** @example Jane */
      firstName?: string;
      /** @example Smith */
      lastName?: string;
      /** @example Smith Enterprises */
      companyName?: string;
      businessType?: components["schemas"]["BusinessType"];
      email: components["schemas"]["Email"];
      phone?: components["schemas"]["PhoneNumber"];
      address?: components["schemas"]["Address"];
      billingAddress?: components["schemas"]["Address"];
      /** @example 987654321 */
      taxNumber?: string;
      /** @example Preferred customer with expedited service */
      notes?: string;
    };
  };
  responses: {
    /** @description Bad request - validation failed */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ValidationError"];
      };
    };
    /** @description Authentication required */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["AuthenticationError"];
      };
    };
    /** @description Insufficient permissions */
    Forbidden: {
      content: {
        "application/json": components["schemas"]["AuthorizationError"];
      };
    };
    /** @description Resource not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["NotFoundError"];
      };
    };
    /** @description Resource conflict */
    Conflict: {
      content: {
        "application/json": components["schemas"]["ConflictError"];
      };
    };
    /** @description Rate limit exceeded */
    TooManyRequests: {
      headers: {
        /** @description Request limit per window */
        "X-RateLimit-Limit"?: number;
        /** @description Remaining requests in window */
        "X-RateLimit-Remaining"?: number;
        /** @description Time when window resets (Unix timestamp) */
        "X-RateLimit-Reset"?: number;
      };
      content: {
        "application/json": components["schemas"]["RateLimitError"];
      };
    };
    /** @description Internal server error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["InternalServerError"];
      };
    };
  };
  parameters: {
    /** @description Organization UUID */
    OrganizationId: string;
    /** @description Number of items to return */
    PaginationLimit?: number;
    /** @description Number of items to skip */
    PaginationOffset?: number;
    /** @description Field to sort by */
    SortBy?: string;
    /** @description Sort order */
    SortOrder?: "asc" | "desc";
    /** @description Search query string */
    SearchQuery?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
