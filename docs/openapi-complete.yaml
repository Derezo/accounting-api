openapi: 3.0.3
info:
  title: Lifestream Dynamics Accounting API
  description: |
    Bank-level secure REST API for universal accounting and financial operations.

    ## Features
    - JWT authentication with refresh tokens and 2FA support
    - Role-based access control (8 roles: VIEWER â†’ SUPER_ADMIN)
    - Multi-tenant architecture with complete organization isolation
    - Comprehensive validation with express-validator
    - Audit logging for all operations with immutable trail
    - Stripe payment integration with PCI DSS compliance
    - File upload capabilities with encryption
    - Complex filtering, pagination, and sorting
    - Real-time payment processing and reconciliation
    - 8-stage customer lifecycle automation

    ## Security
    This API implements bank-level security measures:
    - End-to-end encryption with organization-specific keys
    - Rate limiting and DDoS protection
    - CORS protection and Helmet security headers
    - Input validation and sanitization
    - Complete audit trail for compliance (PIPEDA, FINTRAC, CRA)
    - Multi-factor authentication support
    - Session management with automatic expiry

    ## Authentication
    The API uses JWT tokens for authentication. Include the Bearer token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## Multi-Tenant Architecture
    Most endpoints require an `organizationId` path parameter for complete data isolation:
    ```
    /organizations/{organizationId}/customers
    ```

    ## Rate Limiting
    API requests are rate-limited. See response headers for current limits:
    - `X-RateLimit-Limit`: Request limit per window
    - `X-RateLimit-Remaining`: Remaining requests in window
    - `X-RateLimit-Reset`: Time when window resets

    ## Business Workflows
    The API supports complete business process automation:
    1. **Customer Lifecycle**: 8-stage pipeline from quote to completion
    2. **Payment Processing**: Multi-method with automated reconciliation
    3. **Project Management**: Task tracking and time management
    4. **Document Management**: Encrypted file storage with version control
    5. **Audit & Compliance**: Real-time monitoring and reporting

  version: 1.0.0
  contact:
    name: Lifestream Dynamics
    email: support@lifestreamdynamics.com
    url: https://lifestreamdynamics.com
  license:
    name: Proprietary
    url: https://lifestreamdynamics.com/license

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.accounting.lifestreamdynamics.com/api/v1
    description: Production server
  - url: https://staging-api.accounting.lifestreamdynamics.com/api/v1
    description: Staging server

security:
  - bearerAuth: []

tags:
  - name: Health
    description: Health check and system status endpoints
  - name: Authentication
    description: User authentication, registration, and session management
  - name: Organizations
    description: Organization management and member administration
  - name: Users
    description: User administration and account management
  - name: Customers
    description: Customer relationship management and profiles
  - name: Quotes
    description: Quote generation, management, and approval workflow
  - name: Invoices
    description: Invoice creation, payment tracking, and PDF generation
  - name: Payments
    description: Payment processing, refunds, and reconciliation
  - name: E-Transfers
    description: Electronic transfer processing and auto-matching
  - name: Manual Payments
    description: Manual payment entry and receipt generation
  - name: Projects
    description: Project management, task tracking, and time entries
  - name: Appointments
    description: Appointment scheduling and availability management
  - name: Payment Analytics
    description: Payment analytics and reporting
  - name: Accounting
    description: Double-entry bookkeeping, journal entries, and chart of accounts
  - name: Tax
    description: Tax calculations, GST/HST/PST, and Canadian tax compliance
  - name: Financial Statements
    description: Balance sheet, income statement, cash flow statement, and financial ratios
  - name: Documents
    description: Document management with encryption and version control
  - name: Audit
    description: Audit logging, security monitoring, and compliance reporting

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from `/auth/login` endpoint

  parameters:
    OrganizationId:
      name: organizationId
      in: path
      required: true
      description: Unique identifier for the organization (multi-tenant isolation)
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_-]+$'
        example: "org_123abc"

    UserId:
      name: userId
      in: path
      required: true
      description: Unique identifier for the user
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_-]+$'
        example: "user_456def"

    ResourceId:
      name: id
      in: path
      required: true
      description: Unique identifier for the resource
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_-]+$'
        example: "res_789ghi"

    Page:
      name: page
      in: query
      description: Page number for pagination (1-based)
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1

    Limit:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        example: 20

    Sort:
      name: sort
      in: query
      description: Sort field and direction (field:asc or field:desc)
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_]+:(asc|desc)$'
        example: "createdAt:desc"

    Search:
      name: search
      in: query
      description: Search term for text-based filtering
      schema:
        type: string
        minLength: 1
        maxLength: 100
        example: "john doe"

  schemas:
    # Base Schemas
    Timestamp:
      type: string
      format: date-time
      description: ISO 8601 timestamp
      example: "2023-12-01T10:30:00.000Z"

    Currency:
      type: string
      enum: [CAD, USD, EUR, GBP]
      default: CAD
      description: ISO 4217 currency code

    Money:
      type: object
      properties:
        amount:
          type: number
          format: decimal
          description: Monetary amount with proper decimal precision
          example: 1234.56
        currency:
          $ref: '#/components/schemas/Currency'
      required: [amount, currency]

    # Enum Schemas
    UserRole:
      type: string
      enum: [VIEWER, EMPLOYEE, ACCOUNTANT, MANAGER, ADMIN, SUPER_ADMIN]
      description: User role hierarchy for authorization

    CustomerTier:
      type: string
      enum: [PERSONAL, SMALL_BUSINESS, ENTERPRISE]
      description: Customer service tier classification

    CustomerStatus:
      type: string
      enum: [PROSPECT, ACTIVE, INACTIVE, SUSPENDED]
      description: Customer account status

    QuoteStatus:
      type: string
      enum: [DRAFT, SENT, VIEWED, ACCEPTED, REJECTED, EXPIRED]
      description: Quote workflow status

    InvoiceStatus:
      type: string
      enum: [DRAFT, SENT, VIEWED, PAID, OVERDUE, CANCELLED]
      description: Invoice payment status

    PaymentMethod:
      type: string
      enum: [STRIPE_CARD, E_TRANSFER, CASH, BANK_TRANSFER, CHECK]
      description: Payment processing method

    PaymentStatus:
      type: string
      enum: [PENDING, COMPLETED, FAILED, REFUNDED, CANCELLED]
      description: Payment processing status

    ProjectStatus:
      type: string
      enum: [QUOTED, ACCEPTED, IN_PROGRESS, ON_HOLD, COMPLETED, CANCELLED]
      description: Project lifecycle status

    # Error Schemas
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type identifier
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid input parameters"
        details:
          type: object
          description: Additional error context and field-specific messages
          additionalProperties: true
          example:
            field: "email"
            code: "INVALID_FORMAT"
        requestId:
          type: string
          description: Unique request identifier for debugging
          example: "req_abc123def456"
        timestamp:
          $ref: '#/components/schemas/Timestamp'
      required: [error, message, timestamp]

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              enum: [VALIDATION_ERROR]
            details:
              type: object
              properties:
                fields:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      message:
                        type: string
                      value:
                        type: string

    AuthenticationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              enum: [AUTHENTICATION_REQUIRED, INVALID_TOKEN, TOKEN_EXPIRED]

    AuthorizationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              enum: [INSUFFICIENT_PERMISSIONS, ORGANIZATION_ACCESS_DENIED]

    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              enum: [RESOURCE_NOT_FOUND]

    ConflictError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              enum: [RESOURCE_CONFLICT, DUPLICATE_ENTRY]

    RateLimitError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              enum: [RATE_LIMIT_EXCEEDED]
            details:
              type: object
              properties:
                limit:
                  type: integer
                remaining:
                  type: integer
                resetTime:
                  type: integer

  responses:
    # Common Responses
    Success:
      description: Operation successful
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Operation completed successfully"
              timestamp:
                $ref: '#/components/schemas/Timestamp'

    AuthenticationError:
      description: Authentication required or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'

    AuthorizationError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorizationError'

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'

    ConflictError:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictError'

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RateLimitError'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    # Pagination Schema
    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
          example: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          description: Items per page
          example: 20
        total:
          type: integer
          minimum: 0
          description: Total number of items
          example: 150
        totalPages:
          type: integer
          minimum: 0
          description: Total number of pages
          example: 8
        hasNext:
          type: boolean
          description: Whether there are more pages
          example: true
        hasPrev:
          type: boolean
          description: Whether there are previous pages
          example: false
      required: [page, limit, total, totalPages, hasNext, hasPrev]

    # Core Entity Schemas
    Organization:
      type: object
      properties:
        id:
          type: string
          description: Unique organization identifier
          example: "org_123abc"
        name:
          type: string
          description: Organization display name
          example: "Acme Corp Inc."
        legalName:
          type: string
          description: Legal business name
          example: "Acme Corporation Incorporated"
        domain:
          type: string
          format: hostname
          description: Organization domain for email-based routing
          example: "acme.com"
        type:
          type: string
          enum: [SINGLE_BUSINESS, MULTI_BUSINESS, AGENCY]
          description: Organization business model type
        email:
          type: string
          format: email
          description: Primary organization contact email
          example: "contact@acme.com"
        phone:
          type: string
          description: Primary phone number
          example: "+1-555-123-4567"
        website:
          type: string
          format: uri
          description: Organization website URL
          example: "https://acme.com"
        businessNumber:
          type: string
          description: Government business registration number
          example: "123456789RC0001"
        taxNumber:
          type: string
          description: Tax identification number
          example: "123456789"
        isActive:
          type: boolean
          description: Organization account status
          example: true
        settings:
          type: object
          description: Organization-specific configuration settings
          additionalProperties: true
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'
      required: [id, name, email, isActive, createdAt, updatedAt]

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
          example: "user_456def"
        organizationId:
          type: string
          description: Organization the user belongs to
          example: "org_123abc"
        email:
          type: string
          format: email
          description: User email address (unique)
          example: "john.doe@acme.com"
        firstName:
          type: string
          description: User first name
          example: "John"
        lastName:
          type: string
          description: User last name
          example: "Doe"
        role:
          $ref: '#/components/schemas/UserRole'
        isActive:
          type: boolean
          description: User account status
          example: true
        emailVerified:
          type: boolean
          description: Email verification status
          example: true
        twoFactorEnabled:
          type: boolean
          description: Two-factor authentication status
          example: false
        avatar:
          type: string
          format: uri
          description: User profile picture URL
          example: "https://cdn.example.com/avatars/user_456def.jpg"
        phone:
          type: string
          description: User phone number
          example: "+1-555-987-6543"
        lastLoginAt:
          $ref: '#/components/schemas/Timestamp'
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'
      required: [id, organizationId, email, firstName, lastName, role, isActive, emailVerified, createdAt, updatedAt]

    Customer:
      type: object
      properties:
        id:
          type: string
          description: Unique customer identifier
          example: "cust_789ghi"
        organizationId:
          type: string
          description: Organization the customer belongs to
          example: "org_123abc"
        customerNumber:
          type: string
          description: Organization-specific customer number
          example: "CUST-2023-001"
        tier:
          $ref: '#/components/schemas/CustomerTier'
        status:
          $ref: '#/components/schemas/CustomerStatus'
        creditLimit:
          type: number
          format: decimal
          description: Customer credit limit
          example: 5000.00
        paymentTerms:
          type: integer
          description: Default payment terms in days
          example: 15
        taxExempt:
          type: boolean
          description: Tax exemption status
          example: false
        preferredCurrency:
          $ref: '#/components/schemas/Currency'
        notes:
          type: string
          description: Internal notes about the customer
          example: "Preferred customer - priority support"
        person:
          $ref: '#/components/schemas/Person'
        business:
          $ref: '#/components/schemas/Business'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/CustomerAddress'
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'
      required: [id, organizationId, customerNumber, tier, status, paymentTerms, taxExempt, preferredCurrency, createdAt, updatedAt]

    Person:
      type: object
      properties:
        id:
          type: string
          example: "person_abc123"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        middleName:
          type: string
          example: "Michael"
        dateOfBirth:
          type: string
          format: date
          example: "1985-06-15"
        email:
          type: string
          format: email
          example: "john.doe@email.com"
        phone:
          type: string
          example: "+1-555-123-4567"
        mobile:
          type: string
          example: "+1-555-987-6543"
      required: [id, firstName, lastName]

    Business:
      type: object
      properties:
        id:
          type: string
          example: "biz_def456"
        legalName:
          type: string
          example: "Smith Construction Ltd."
        tradeName:
          type: string
          example: "Smith Builders"
        businessNumber:
          type: string
          example: "987654321RC0001"
        taxNumber:
          type: string
          example: "987654321"
        incorporationDate:
          type: string
          format: date
          example: "2015-03-10"
        businessType:
          type: string
          enum: [SOLE_PROPRIETORSHIP, PARTNERSHIP, CORPORATION, LLC]
          example: "CORPORATION"
        email:
          type: string
          format: email
          example: "info@smithbuilders.com"
        phone:
          type: string
          example: "+1-555-555-0123"
        website:
          type: string
          format: uri
          example: "https://smithbuilders.com"
      required: [id, legalName, businessType]

    Address:
      type: object
      properties:
        id:
          type: string
          example: "addr_ghi789"
        line1:
          type: string
          example: "123 Main Street"
        line2:
          type: string
          example: "Suite 456"
        city:
          type: string
          example: "Toronto"
        stateProvince:
          type: string
          example: "Ontario"
        postalCode:
          type: string
          example: "M5V 3A8"
        country:
          type: string
          example: "Canada"
        type:
          type: string
          enum: [BILLING, SHIPPING, MAILING]
          example: "BILLING"
        isPrimary:
          type: boolean
          example: true
      required: [id, line1, city, stateProvince, postalCode, country, type]

    CustomerAddress:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        type:
          type: string
          enum: [BILLING, SHIPPING, MAILING]
        isPrimary:
          type: boolean
      required: [address, type]

paths:
  # Health Endpoints
  /health:
    get:
      tags: [Health]
      summary: Basic health check
      description: Check if the API is running and responsive
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy]
                  timestamp:
                    $ref: '#/components/schemas/Timestamp'
                  environment:
                    type: string
                    example: 'production'
                  version:
                    type: string
                    example: '1.0.0'
                required: [status, timestamp]

  /health/db:
    get:
      tags: [Health]
      summary: Database health check
      description: Check database connectivity and performance
      security: []
      responses:
        '200':
          description: Database is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy]
                  database:
                    type: string
                    enum: [connected]
                  responseTime:
                    type: number
                    description: Database response time in milliseconds
                required: [status, database]
        '503':
          description: Database is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Authentication Endpoints
  /auth/login:
    post:
      tags: [Authentication]
      summary: User authentication
      description: Authenticate user with email/password and receive JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "john.doe@acme.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: User password
                  example: "SecurePassword123!"
                rememberMe:
                  type: boolean
                  description: Extend session duration
                  default: false
                twoFactorCode:
                  type: string
                  pattern: '^[0-9]{6}$'
                  description: Two-factor authentication code (if enabled)
                  example: "123456"
              required: [email, password]
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        description: JWT access token
                      refreshToken:
                        type: string
                        description: JWT refresh token
                      expiresIn:
                        type: integer
                        description: Token expiration time in seconds
                        example: 3600
                    required: [accessToken, refreshToken, expiresIn]
                  sessionId:
                    type: string
                    description: Session identifier
                  requiresTwoFactor:
                    type: boolean
                    description: Whether 2FA is required
                    default: false
                required: [user, tokens, sessionId]
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '423':
          description: Account locked due to failed attempts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/AuthenticationError'
                  - type: object
                    properties:
                      details:
                        type: object
                        properties:
                          lockedUntil:
                            $ref: '#/components/schemas/Timestamp'
                          remainingAttempts:
                            type: integer

  /auth/logout:
    post:
      tags: [Authentication]
      summary: User logout
      description: Invalidate current session and tokens
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
                  timestamp:
                    $ref: '#/components/schemas/Timestamp'
        '401':
          $ref: '#/components/responses/AuthenticationError'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh JWT tokens
      description: Get new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Valid refresh token
              required: [refreshToken]
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: New JWT access token
                  refreshToken:
                    type: string
                    description: New refresh token
                  expiresIn:
                    type: integer
                    description: Token expiration time in seconds
                required: [accessToken, refreshToken, expiresIn]
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /auth/register:
    post:
      tags: [Authentication]
      summary: User registration
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "new.user@acme.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: User password (min 8 characters)
                  example: "SecurePassword123!"
                confirmPassword:
                  type: string
                  format: password
                  description: Password confirmation
                firstName:
                  type: string
                  minLength: 1
                  description: User first name
                  example: "Jane"
                lastName:
                  type: string
                  minLength: 1
                  description: User last name
                  example: "Smith"
                organizationName:
                  type: string
                  minLength: 1
                  description: Organization name for new organization
                  example: "Smith Consulting"
                phone:
                  type: string
                  description: Phone number
                  example: "+1-555-123-4567"
                inviteToken:
                  type: string
                  description: Organization invite token (optional)
              required: [email, password, confirmPassword, firstName, lastName]
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  organization:
                    $ref: '#/components/schemas/Organization'
                  message:
                    type: string
                    example: "Registration successful. Please verify your email."
        '400':
          description: Registration failed due to validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'

  /auth/forgot-password:
    post:
      tags: [Authentication]
      summary: Initiate password reset
      description: Send password reset email to user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
              required: [email]
      responses:
        '200':
          description: Password reset email sent (always returns 200 for security)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "If an account with that email exists, a password reset link has been sent."

  /auth/reset-password:
    post:
      tags: [Authentication]
      summary: Complete password reset
      description: Reset password using token from email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Password reset token from email
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: New password
                confirmPassword:
                  type: string
                  format: password
                  description: Password confirmation
              required: [token, password, confirmPassword]
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful"
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/verify-email:
    post:
      tags: [Authentication]
      summary: Verify email address
      description: Verify user email with token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Email verification token
              required: [token]
      responses:
        '200':
          description: Email verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verified successfully"
        '400':
          description: Invalid or expired verification token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/me:
    get:
      tags: [Authentication]
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  organization:
                    $ref: '#/components/schemas/Organization'
                  permissions:
                    type: array
                    items:
                      type: string
                    description: User permissions for current organization
                    example: ["customers:read", "quotes:write", "invoices:read"]
        '401':
          $ref: '#/components/responses/AuthenticationError'
