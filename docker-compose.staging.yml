version: '3.8'

# Staging Docker Compose configuration
# Mirrors production but with reduced resources and debug features
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: accounting-postgres-staging
    restart: unless-stopped
    environment:
      POSTGRES_DB: accounting_staging
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-staging_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "127.0.0.1:5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d accounting_staging"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - accounting-staging
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: accounting-redis-staging
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-staging_redis}
    volumes:
      - redis_staging_data:/data
    ports:
      - "127.0.0.1:6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - accounting-staging
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Accounting API Application
  accounting-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: accounting-api-staging
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3000
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-staging_password}@postgres:5432/accounting_staging
      REDIS_URL: redis://:${REDIS_PASSWORD:-staging_redis}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-staging_jwt_secret_change_in_production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-staging_encryption_key_32_chars}
      API_VERSION: v1
      LOG_LEVEL: debug
      ENABLE_SWAGGER: true
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX: 100
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - accounting-staging
    volumes:
      - app_staging_logs:/app/logs
      - app_staging_uploads:/app/uploads
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    labels:
      - "environment=staging"
      - "service=accounting-api"

  # Nginx Reverse Proxy (Optional for staging)
  nginx:
    image: nginx:alpine
    container_name: accounting-nginx-staging
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx/staging.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - accounting-api
    networks:
      - accounting-staging
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

networks:
  accounting-staging:
    driver: bridge
    name: accounting-staging-network

volumes:
  postgres_staging_data:
    driver: local
    name: accounting-postgres-staging-data
  redis_staging_data:
    driver: local
    name: accounting-redis-staging-data
  app_staging_logs:
    driver: local
    name: accounting-api-staging-logs
  app_staging_uploads:
    driver: local
    name: accounting-api-staging-uploads