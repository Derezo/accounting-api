version: '3.8'

# Production Docker Compose configuration with bank-level security
services:
  # PostgreSQL Database - Primary
  postgres-primary:
    image: postgres:15-alpine
    container_name: accounting-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: accounting_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGUSER: postgres
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d accounting_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - accounting-backend
    secrets:
      - postgres_password
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # PostgreSQL Database - Read Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: accounting-postgres-replica
    restart: unless-stopped
    environment:
      POSTGRES_DB: accounting_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      PGUSER: postgres
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./docker/postgres/replica.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:5433:5432"
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d accounting_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - accounting-backend
    secrets:
      - postgres_password
    security_opt:
      - no-new-privileges:true

  # Redis Cluster - Master
  redis-master:
    image: redis:7-alpine
    container_name: accounting-redis-master
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_master_data:/data
      - ./docker/redis/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - accounting-backend
    secrets:
      - redis_password
    security_opt:
      - no-new-privileges:true

  # Redis Cluster - Replica
  redis-replica:
    image: redis:7-alpine
    container_name: accounting-redis-replica
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --replicaof redis-master 6379
    volumes:
      - redis_replica_data:/data
      - ./docker/redis/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - accounting-backend
    secrets:
      - redis_password
    security_opt:
      - no-new-privileges:true

  # Application API - Multiple instances for load balancing
  api-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: accounting-api-1
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      API_VERSION: v1
      DATABASE_URL: postgresql://postgres:$(cat /run/secrets/postgres_password)@postgres-primary:5432/accounting_db?schema=public
      DATABASE_REPLICA_URL: postgresql://postgres:$(cat /run/secrets/postgres_password)@postgres-replica:5432/accounting_db?schema=public
      REDIS_URL: redis://:$(cat /run/secrets/redis_password)@redis-master:6379
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_REFRESH_SECRET_FILE: /run/secrets/jwt_refresh_secret
      ENCRYPTION_KEY_FILE: /run/secrets/encryption_key
      API_KEY_SALT_FILE: /run/secrets/api_key_salt
      STRIPE_SECRET_KEY_FILE: /run/secrets/stripe_secret_key
      STRIPE_WEBHOOK_SECRET_FILE: /run/secrets/stripe_webhook_secret
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - accounting-backend
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
      - jwt_refresh_secret
      - encryption_key
      - api_key_salt
      - stripe_secret_key
      - stripe_webhook_secret
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  api-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: accounting-api-2
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      API_VERSION: v1
      DATABASE_URL: postgresql://postgres:$(cat /run/secrets/postgres_password)@postgres-primary:5432/accounting_db?schema=public
      DATABASE_REPLICA_URL: postgresql://postgres:$(cat /run/secrets/postgres_password)@postgres-replica:5432/accounting_db?schema=public
      REDIS_URL: redis://:$(cat /run/secrets/redis_password)@redis-master:6379
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_REFRESH_SECRET_FILE: /run/secrets/jwt_refresh_secret
      ENCRYPTION_KEY_FILE: /run/secrets/encryption_key
      API_KEY_SALT_FILE: /run/secrets/api_key_salt
      STRIPE_SECRET_KEY_FILE: /run/secrets/stripe_secret_key
      STRIPE_WEBHOOK_SECRET_FILE: /run/secrets/stripe_webhook_secret
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - accounting-backend
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
      - jwt_refresh_secret
      - encryption_key
      - api_key_salt
      - stripe_secret_key
      - stripe_webhook_secret
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx Load Balancer with SSL termination
  nginx:
    image: nginx:1.25-alpine
    container_name: accounting-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d/production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./docker/nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api-1
      - api-2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - accounting-frontend
      - accounting-backend
    security_opt:
      - no-new-privileges:true

  # ELK Stack for Logging and Monitoring
  elasticsearch:
    image: elasticsearch:8.10.4
    container_name: accounting-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD_FILE=/run/secrets/elastic_password
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - accounting-monitoring
    secrets:
      - elastic_password
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  logstash:
    image: logstash:8.10.4
    container_name: accounting-logstash
    restart: unless-stopped
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/usr/share/logstash/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - accounting-monitoring
    security_opt:
      - no-new-privileges:true

  kibana:
    image: kibana:8.10.4
    container_name: accounting-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD_FILE=/run/secrets/elastic_password
    ports:
      - "127.0.0.1:5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - accounting-monitoring
    secrets:
      - elastic_password
    security_opt:
      - no-new-privileges:true

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: accounting-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - accounting-monitoring
    security_opt:
      - no-new-privileges:true

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: accounting-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3001:3000"
    depends_on:
      - prometheus
    networks:
      - accounting-monitoring
    secrets:
      - grafana_password
    security_opt:
      - no-new-privileges:true

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: accounting-backup
    restart: "no"
    profiles: ["backup"]
    environment:
      PGPASSFILE: /run/secrets/postgres_password
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup-prod.sh:/backup.sh:ro
    command: sh /backup.sh
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - accounting-backend
    secrets:
      - postgres_password

# Docker Secrets for sensitive data
secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true
  jwt_refresh_secret:
    external: true
  encryption_key:
    external: true
  api_key_salt:
    external: true
  stripe_secret_key:
    external: true
  stripe_webhook_secret:
    external: true
  elastic_password:
    external: true
  grafana_password:
    external: true

# Networks for service isolation
networks:
  accounting-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24
  accounting-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.2.0/24
  accounting-monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.3.0/24

# Persistent volumes
volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_master_data:
    driver: local
  redis_replica_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local