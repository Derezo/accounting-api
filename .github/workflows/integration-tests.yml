name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  DATABASE_URL: 'file:./test-integration.db'
  TEST_DATABASE_URL: 'file:./test-integration.db'
  JWT_SECRET: 'test-jwt-secret-for-ci-cd'
  ENCRYPTION_KEY: 'test-encryption-key-32-chars-1234567890'

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g @faker-js/faker jest-html-reporters jest-junit

    - name: Setup test environment
      run: |
        mkdir -p test-results/integration
        mkdir -p coverage/integration

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma db push --force-reset
      env:
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}

    - name: Lint code
      run: npm run lint

    - name: Type check
      run: npm run typecheck

    - name: Run unit tests
      run: npm run test:coverage
      env:
        NODE_ENV: test

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        CI: true
        REDIS_URL: redis://localhost:6379
      timeout-minutes: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '18.x'
      with:
        file: ./coverage/integration/lcov.info
        flags: integration
        name: integration-tests

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = './test-results/integration/junit.xml';

          if (fs.existsSync(path)) {
            const testResults = fs.readFileSync(path, 'utf8');
            // Parse test results and create comment
            // This would be enhanced with actual test result parsing
            const comment = `
            ## Integration Test Results ðŸ§ª

            Integration tests completed for Node.js ${{ matrix.node-version }}

            - View detailed results in the Actions tab
            - Coverage report available in artifacts
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  security-scan:
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --production
      continue-on-error: true

  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Setup performance test database
      run: npx prisma db push --force-reset
      env:
        DATABASE_URL: 'file:./perf-test.db'

    - name: Run performance tests
      run: |
        npm run test:integration -- --testPathPattern=performance-security
      env:
        NODE_ENV: test
        DATABASE_URL: 'file:./perf-test.db'
        PERFORMANCE_TEST: true
      timeout-minutes: 45

    - name: Generate performance report
      run: |
        echo "## Performance Test Results" > performance-report.md
        echo "Performance tests completed successfully" >> performance-report.md
        echo "Full results available in test artifacts" >> performance-report.md

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          performance-report.md
          test-results/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Integration tests passed âœ…"
        echo "Security scans completed âœ…"
        # Add actual deployment commands here

    - name: Run smoke tests on staging
      run: |
        echo "Running smoke tests against staging..."
        # Add staging smoke test commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "All checks passed âœ…"
        # Add actual deployment commands here

    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add production health check commands here